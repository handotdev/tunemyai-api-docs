{
  "openapi": "3.0.0",
  "info": {
    "title": "TuneMyAI API",
    "version": "1.0.0",
    "description": ""
  },
  "components": {
    "schemas": {
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the image"
          },
          "url": {
            "type": "string",
            "description": "The url of the image"
          }
        }
      },
      "Models": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "modelType": {
              "type": "string",
              "enum": [
                "HUGGINGFACE",
                "ORIGINAL_SD"
              ]
            },
            "huggingfaceHubId": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "userId": {
              "type": "string"
            },
            "finetuningJobId": {
              "type": "string"
            },
            "imageSets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "finetunedModelId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ImageSet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "fileSize": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "FileMetadata": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GenerateImageParams": {
        "type": "object",
        "properties": {
          "prompt_token": {
            "type": "string",
            "description": "Target token for prompt. You can find this from the 'uploadset' used for fine-tuning the model."
          },
          "prompt": {
            "type": "string",
            "description": "txt2img prompt. Make sure to include '{target_token}' to reference your custom object."
          },
          "class_name": {
            "type": "string",
            "description": "Class for prompt. ex. person, man, woman, cat, dog... You can find this from the 'uploadset' used for fine-tuning the model."
          },
          "seed": {
            "type": "number",
            "description": "Seed for reproducibility. Default: 42",
            "nullable": true
          },
          "iterations": {
            "type": "number",
            "description": "Number of images to generate. Default: 4",
            "nullable": true
          },
          "steps": {
            "type": "number",
            "description": "Scheduler steps. Default: 20. Max: 200",
            "nullable": true
          },
          "cfg_scale": {
            "type": "number",
            "description": "Prompt guidance. Default: 9",
            "nullable": true
          },
          "width": {
            "type": "number",
            "description": "Image width in pixels. Only 512 is currently supported. Default: 512",
            "nullable": true
          },
          "height": {
            "type": "number",
            "description": "Image height in pixels. Only 512 is currently supported. Default: 512",
            "nullable": true
          },
          "variation": {
            "type": "number",
            "description": "Add noise to the image in order to generate a series of variations. 0.0 = none, 1.0 = high Default: 0.0",
            "nullable": true
          },
          "sampler": {
            "type": "string",
            "description": "Sampler to generate images. Choices: 'ddim', 'plms', 'k_lms', 'k_dpm_2', 'k_dpm_2_a', 'k_dpmpp_2', 'k_dpmpp_2_a', 'k_euler', 'k_euler_a', 'k_heun' Default: k_euler",
            "nullable": true
          },
          "facetool": {
            "type": "string",
            "description": "Facial restoration tool. Choices: 'gfpgan', 'codeformer' Default: None",
            "nullable": true
          },
          "facetool_strength": {
            "type": "number",
            "description": "Strength of facial restoration tool. 0.0 = none, 1.0 = high Default: None",
            "nullable": true
          },
          "codeformer_fidelity": {
            "type": "number",
            "description": "Codeformer fidelity. 0.0 = none, 1.0 = high. Default: None"
          }
        }
      },
      "TrainingImageParams": {
        "type": "object",
        "description": "The parameters for training a finetuning job",
        "properties": {
          "pretrained_model_name": {
            "type": "string",
            "description": "The model identifier from huggingface.co/models. Default: 'runwayml/stable-diffusion-v1-5'"
          },
          "pretrained_vae_name": {
            "type": "string",
            "description": "The vae identifier from huggingface.co/models: Default: 'stabilityai/sd-vae-ft-mse'"
          },
          "revision": {
            "type": "string",
            "description": "The specific model version to use (can be a branch name, tag name or commit id)"
          },
          "tokenizer_name": {
            "type": "string",
            "description": "Pretrained tokenizer name from huggingface.co/models if not the same as `pretrained_model_name`."
          },
          "seed": {
            "type": "number",
            "description": "A seed for reproducible training. Default: 42"
          },
          "with_prior_preservation": {
            "type": "boolean",
            "description": "Add prior preservation loss. Default: true"
          },
          "prior_loss_weight": {
            "type": "number",
            "description": "Weight of prior preservation loss. Default: 1.0"
          },
          "resolution": {
            "type": "number",
            "description": "The resolution for input images, all the images in the train/validation dataset will be resized to this resolution. Default: 512"
          },
          "center_crop": {
            "type": "boolean",
            "description": "Whether to center crop images before resizing to resolution. Default: false"
          },
          "train_text_encoder": {
            "type": "boolean",
            "description": "Whether to train the text encoder. Default: true"
          },
          "mixed_precision": {
            "type": "string",
            "description": "Whether to use mixed precision. Choices: 'no', 'fp16', 'bf16'. Default: 'fp16'"
          },
          "use_8bit_adam": {
            "type": "boolean",
            "description": "Whether to use 8-bit adam from bitsandbytes. Default: true"
          },
          "learning_rate": {
            "type": "number",
            "description": "Initial learning rate (after the potential warmup period) to use. Default: 1e-6"
          },
          "lr_scheduler": {
            "type": "string",
            "description": "The scheduler type to use. Choices: 'constant', 'linear', 'cosine', 'cosine_with_restarts', 'polynomial', 'constant_with_warmup' Default: 'constant'"
          },
          "lr_warmup_steps": {
            "type": "number",
            "description": "The number of steps for the warmup in the lr scheduler. Default: 0"
          },
          "num_class_images": {
            "type": "number",
            "description": "Minimal class images for prior preservation loss. Default: 50"
          },
          "max_train_steps": {
            "type": "number",
            "description": "Total number of training steps to perform. Default: 1200"
          },
          "pad_tokens": {
            "type": "boolean",
            "description": "Flag to pad tokens to length 77. Default: true"
          },
          "adam_beta1": {
            "type": "number",
            "description": "The beta1 value for the Adam optimizer. Default: 0.9"
          },
          "adam_beta2": {
            "type": "number",
            "description": "The beta2 value for the Adam optimizer. Default: 0.999"
          },
          "adam_weight_decay": {
            "type": "number",
            "description": "The weight decay value for the Adam optimizer. Default: 1e-2"
          },
          "adam_epsilon": {
            "type": "number",
            "description": "The epsilon value for the Adam optimizer. Default: 1e-8"
          },
          "max_grad_norm": {
            "type": "number",
            "description": "The maximum value for the gradient norm. Default: 1.0"
          },
          "hub_model_id": {
            "type": "string",
            "description": "The model id to use to push the model to the hub."
          },
          "hub_token": {
            "type": "string",
            "description": "The token to use to push the model to the hub."
          },
          "class_prompt": {
            "type": "string",
            "description": "The prompt to generate class regularization images (eg: a photo of a person)"
          },
          "instance_prompt": {
            "type": "string",
            "description": "The prompt to generate samples during training (eg: a photo of a <zwx> person)"
          }
        }
      }
    }
  },
  "paths": {
    "/images/{inferenceJobId}": {
      "get": {
        "description": "Get generated images for a given inference job",
        "responses": {
          "200": {
            "description": "Returns an object containing a list of generated images"
          }
        }
      }
    },
    "/job/finetune": {
      "post": {
        "summary": "Start a finetuning job",
        "description": "Once you created the photo sets you want to finetune on, you can start a finetuning job.\n\nThe finetune endpoint takes three parameters:\n\n1. `imageSets`: The image sets you want to fine tune on as a list of the photo set slugs.\n2. `webhookUrl`: The webhook URL to report events, including when your job has finished.\n3. `trainingParams` (optional): The training parameters for the job.\n\nWhile we provide sensible defaults for training so you can leave, the full set of training parameters are shown below.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "imageSets"
                ],
                "properties": {
                  "imageSets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "String array of image set slugs."
                  },
                  "trainingParams": {
                    "$ref": "#/components/schemas/TrainingImageParams",
                    "description": "Optional parameters for training the model."
                  },
                  "webhookURL": {
                    "type": "string",
                    "description": "Optional webhook URL to send notifications to when the job is complete."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new fine-tuning job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Description of the result of the operation."
                    },
                    "jobId": {
                      "type": "string",
                      "description": "ID of the newly created job."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/job/generate": {
      "post": {
        "summary": "Generate images for a given model and prompts",
        "description": "This is the main endpoint for generating images.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "modelId": {
                    "type": "string"
                  },
                  "prompts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GenerateImageParams"
                    }
                  },
                  "webhookURL": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message and job ID for the image generation job",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "jobId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "Get all of your finetuned models",
        "description": "This endpoint returns a list of all of your finetuned models. If there's a certain field you want to filter by, ping [support@tunemy.ai](mailto:support@tunemy.ai).\n\nIf you'd like to download a specific model, you can use the `url` for the model in the response.\n",
        "responses": {
          "200": {
            "description": "A list of finetuned models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "$ref": "#/components/schemas/Models"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/image-sets": {
      "get": {
        "description": "Get all image sets",
        "responses": {
          "200": {
            "description": "An object containing a list of image sets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imageSets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ImageSet"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/image-set": {
      "post": {
        "summary": "This is the first step in the finetuning process. You'll want to start by creating an \"Image Set\".",
        "description": "Your image set is a collection of images that you want to finetune on.\n\n- All the images you want to finetune on.\n- The 'prompt token' that you'll use to reference in the model. We recommend using a unique identifier for your user (eg: uuid). We also prefix and suffix this with `<` and `>` to ensure token uniqueness (ex. '<324179>')\n- The 'className' of the image set (ex. person, man, cat, dog, mouse). This can be whatever you want, but it's better to keep it specific for better results.\n\nThe API will return a list pre-signed URLs that you can `PUT` your images to.\n\nWe currently have a limitation of 25 images per photo set. If you need more, ping support@tunemy.ai or join our [Discord](https://discord.com/invite/KDycrQyr2K) and create a support ticket.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the image set (e.g \"My Image Set\")"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The filenames of the images to upload (e.g [\"image1.jpg\", \"image2.jpg\", ..., \"imageN.jpg\"])"
                    }
                  },
                  "promptToken": {
                    "type": "string",
                    "description": "The prompt token to use (e.g \"my-un1qu3-t0k3n\")"
                  },
                  "className": {
                    "type": "string",
                    "description": "The class name to use (e.g \"person\")"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated image set and uploaded file metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imageSet": {
                      "$ref": "#/components/schemas/ImageSet"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FileMetadata"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/image-set/{slug}": {
      "get": {
        "description": "Get an image set by slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "The slug of the image set",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing an image set",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imageSet": {
                      "$ref": "#/components/schemas/ImageSet"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "You can add more images to an upload set after you've created one using this endpoint.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "The slug of the image set",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated image set and uploaded file metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imageSet": {
                      "$ref": "#/components/schemas/ImageSet"
                    },
                    "files": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FileMetadata"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}